h1. Apache/PHP docker image with useful enhancements

* based on chialab PHP image ["https://github.com/chialab/docker-php":https://github.com/chialab/docker-php]
* support for SSL
* www-data with home path for certificates
* user and group of www-data are re-created with host's userID and groupID as workaround to file permission issues on the host (userID and groupID are set via .env file, see below)
* mhsendmail as sendmail for using Mailhog ["https://github.com/mailhog/MailHog":https://github.com/mailhog/MailHog]

h2. Create image

bc. $ sudo docker build -t <you-image-name-here> .

h2. File permissions on host

On *nix hosts you can set the container www-data user with the your current user and group ID to have write permissions on a docker volume. Just create a .env file in the project root with you IDs and build the image.

bc. USER_ID=1000
GROUP_ID=1000

h2. Using environment variables in docker-compose.yml

Docker can make use environment variables in the .env file.

h3. Example docker-compose.yml

bc. web:
  image: "webapp:${TAG}"

h2. Using environment variables in PHP docker container

If you pass the .env file in the service section in docker-compose.yml it will be passed to the environment of the docker container.

h3. Example

.env

bc. USER=my-user-name
PASS=my-password

docker-compose.yml

bc.. version: '3.7'

services:
  php_apache:
    image: scto-php:7.4
    volumes:
      - ./public_html/:/var/www/html/
    ports:
      - 80:80
      - 443:443
    env_file:
      - .env

p. And in PHP you can make use of the @getenv()@ function

bc.. <?php

echo getenv('USER');
echo getenv('PASS');
